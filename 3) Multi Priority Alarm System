/* Develop a Multi-Priority Alarm System (MPAS) that utilizes interrupt-driven alarms and tasks to manage alarms of varying priorities effectively */

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include <stdio.h>


typedef enum                                             // Alarm priorities
{
    LOW = 0,
    MEDIUM,
    HIGH
} alarm_priority_t;


typedef enum                                            // Alarm types
{
    ALARM_NONE,
    ALARM_FIRE,
    ALARM_SECURITY,
    ALARM_LOW_BATTERY
} alarm_type_t;


typedef struct                                         // Alarm event structure
{
    alarm_type_t type;
    alarm_priority_t priority;
} alarm_event_t;

// Queue handle
QueueHandle_t xAlarmQueue;


void fire_alarm_isr(void)                              // ISR simulations
{
    alarm_event_t event = {ALARM_FIRE, HIGH};
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    xQueueSendFromISR(xAlarmQueue, &event, &xHigherPriorityTaskWoken);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

void security_alarm_isr(void) 
{
    alarm_event_t event = {ALARM_SECURITY, MEDIUM};
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    xQueueSendFromISR(xAlarmQueue, &event, &xHigherPriorityTaskWoken);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

void battery_alarm_isr(void) 
{
    alarm_event_t event = {ALARM_LOW_BATTERY, LOW};
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    xQueueSendFromISR(xAlarmQueue, &event, &xHigherPriorityTaskWoken);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}


void vAlarmHandlerTask(void *pvParameters)                                  // Task to handle alarms
{
    alarm_event_t receivedEvent;

    while (1) {
        if (xQueueReceive(xAlarmQueue, &receivedEvent, portMAX_DELAY) == pdPASS) 
{
            switch (receivedEvent.type) {
                case ALARM_FIRE:
                    printf("[HIGH PRIORITY] Fire alarm triggered! Evacuate immediately!\n");
                    break;
                case ALARM_SECURITY:
                    printf("[MEDIUM PRIORITY] Security breach detected! Lockdown initiated!\n");
                    break;
                case ALARM_LOW_BATTERY:
                    printf("[LOW PRIORITY] Low battery warning. Please recharge.\n");
                    break;
                default:
                    printf("[UNKNOWN] Unknown alarm type.\n");
                    break;
            }
        }
    }
}


void vAlarmSimulatorTask(void *pvParameters)                             // Task to simulate alarm triggers
{
    while (1) {
        fire_alarm_isr();         // Simulate fire
        vTaskDelay(pdMS_TO_TICKS(2000));

        battery_alarm_isr();      // Simulate low battery
        vTaskDelay(pdMS_TO_TICKS(2000));

        security_alarm_isr();     // Simulate security breach
        vTaskDelay(pdMS_TO_TICKS(2000));
    }
}


int main(void) 
{
    
    xAlarmQueue = xQueueCreate(10, sizeof(alarm_event_t));                      // Create queue with 10 alarm events

    if (xAlarmQueue != NULL) {
        // Create tasks
        xTaskCreate(vAlarmHandlerTask, "AlarmHandler", configMINIMAL_STACK_SIZE + 100, NULL, 3, NULL);
        xTaskCreate(vAlarmSimulatorTask, "AlarmSimulator", configMINIMAL_STACK_SIZE + 100, NULL, 1, NULL);

        
        vTaskStartScheduler();
    } else {
        printf("Failed to create alarm queue!\n");
    }

   
    while (1);
    return 0;
}
