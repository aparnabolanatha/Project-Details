/* Door Monitor System */

#include <xc.h>


#pragma config FOSC = HS        // High-Speed Oscillator
#pragma config WDTE = OFF       // Watchdog Timer disabled
#pragma config PWRTE = ON       // Power-up Timer enabled
#pragma config BOREN = ON       // Brown-out Reset enabled
#pragma config LVP = OFF        // Low-Voltage Programming disabled
#pragma config CPD = OFF        // Data EEPROM memory code protection disabled
#pragma config WRT = OFF        // Flash Program Memory Write protection off
#pragma config CP = OFF         // Flash Program Memory code protection off

#define _XTAL_FREQ 20000000UL   // 20 MHz crystal frequency

// Pin definitions
#define DOOR_SENSOR   RA0
#define ROOF_SWITCH0  RA1
#define ROOF_SWITCH1  RA2
#define LED           RC0

// Constants
#define DOOR_CLOSED         0
#define DOOR_OPEN           1

#define AUTO_MODE           0
#define MANUAL_MODE_ON      1
#define MANUAL_MODE_OFF     2

// Globals
volatile unsigned char door_status = DOOR_CLOSED;

// I2C Slave address (7-bit)
#define I2C_SLAVE_ADDRESS 0x30

// I2C buffer
volatile unsigned char i2c_data = 0;

// Function prototypes
void init_ports(void);
void init_i2c_slave(void);
void i2c_isr(void);
unsigned char read_door_sensor(void);
unsigned char read_roof_switch(void);
void update_led(unsigned char state);
void handle_lighting_logic(void);

// Interrupt vector
void __interrupt() ISR(void) {
    if (SSPIF) { // I2C interrupt flag
        i2c_isr();
        SSPIF = 0; // Clear interrupt flag
    }
}

void main(void) {
    init_ports();
    init_i2c_slave();

    ei();  // Enable global interrupts

    while(1) {
        handle_lighting_logic();
        __delay_ms(200);
    }
}

void init_ports(void) {
    TRISA = 0b00000111;  // RA0, RA1, RA2 as inputs; rest outputs
    TRISC = 0b00011000;  // RC3 (SCL) & RC4 (SDA) as inputs (I2C lines), RC0 output (LED)
    PORTCbits.RC0 = 0;   // LED off initially
}

void init_i2c_slave(void) {
    SSPADD = (I2C_SLAVE_ADDRESS << 1); // Load slave address (left shifted by 1)
    SSPSTAT = 0x80;   // Slew rate disabled for 100kHz
    SSPCON = 0x36;    // I2C Slave mode, 7-bit address, enable clock stretching
    SSPCON2 = 0x01;

    PIR1bits.SSPIF = 0;   // Clear MSSP interrupt flag
    PIE1bits.SSPIE = 1;   // Enable MSSP interrupt
}

void i2c_isr(void) {
    static unsigned char data_received = 0;
    unsigned char buffer;

    if ((SSPCON & 0x1F) == 0x0E) { // Data received from master (write)
        buffer = SSPBUF;  // Read buffer to clear BF flag
        data_received = 1;
        // We don't expect data from master, ignore or store if needed
    }
    else if ((SSPCON & 0x1F) == 0x0A) { // Master read request (read)
        SSPBUF = door_status;  // Load door status to buffer to send to master
    }

    SSPCONbits.CKP = 1;  // Release clock
}

unsigned char read_door_sensor(void) {
    return (PORTAbits.RA0) ? DOOR_OPEN : DOOR_CLOSED;
}

unsigned char read_roof_switch(void) {
    unsigned char bit0 = PORTAbits.RA1 ? 1 : 0;
    unsigned char bit1 = PORTAbits.RA2 ? 1 : 0;
    return (bit1 << 1) | bit0;
}

void update_led(unsigned char state) {
    if (state)
        PORTCbits.RC0 = 1;
    else
        PORTCbits.RC0 = 0;
}

void handle_lighting_logic(void) {
    unsigned char roof_mode = read_roof_switch();
    door_status = read_door_sensor();

    if (roof_mode == AUTO_MODE) {
        if (door_status == DOOR_OPEN)
            update_led(1);
        else
            update_led(0);
    }
    else if (roof_mode == MANUAL_MODE_ON)
        update_led(1);
    else if (roof_mode == MANUAL_MODE_OFF)
        update_led(0);
    else
        update_led(0);
}
