#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>

// Define alarm priorities
#define FIRE_ALARM_PRIORITY 1
#define SECURITY_ALARM_PRIORITY 2
#define LOW_BATTERY_PRIORITY 3


typedef struct {
    int priority;
    char *message;
} Alarm;


void fire_alarm_handler(int signum);
void security_alarm_handler(int signum);
void low_battery_handler(int signum);

// Task scheduler
void handle_alarm(Alarm alarm);


void trigger_fire_alarm();
void trigger_security_alarm();
void trigger_low_battery();

int main() {
    printf("Multi-Priority Alarm System (MPAS)\n");

    // Registering signal handlers
    signal(SIGUSR1, fire_alarm_handler);
    signal(SIGUSR2, security_alarm_handler);
    signal(SIGINT, low_battery_handler);

    int choice;
    while (1) {
        printf("\nSelect Alarm to Trigger:\n");
        printf("1. Fire Alarm\n2. Security Breach Alarm\n3. Low Battery Alarm\n4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                trigger_fire_alarm();
                break;
            case 2:
                trigger_security_alarm();
                break;
            case 3:
                trigger_low_battery();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice. Try again.\n");
        }
    }
    return 0;
}

void fire_alarm_handler(int signum) {
    Alarm alarm = {FIRE_ALARM_PRIORITY, "Fire Detected! Evacuate Immediately!"};
    handle_alarm(alarm);
}

void security_alarm_handler(int signum) {
    Alarm alarm = {SECURITY_ALARM_PRIORITY, "Security Breach Detected! Take Action!"};
    handle_alarm(alarm);
}

void low_battery_handler(int signum) {
    Alarm alarm = {LOW_BATTERY_PRIORITY, "Low Battery! Please Recharge!"};
    handle_alarm(alarm);
}

void handle_alarm(Alarm alarm) {
    printf("[Priority %d] Alarm: %s\n", alarm.priority, alarm.message);
}

void trigger_fire_alarm() {
    raise(SIGUSR1);
}

void trigger_security_alarm() {
    raise(SIGUSR2);
}

void trigger_low_battery() {
    raise(SIGINT);
}
